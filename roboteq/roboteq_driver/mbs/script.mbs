SCRIPT_VER=29
MAX_CHANNELS=2
Dim last_mode[2] as Integer

' Mode values are:
'  -1 stopped
'  0 speed mode
'  1 position mode
' These correspond to the constants in roboteq_msgs/Command. The motor begins in stopped
' mode, the setup for which is run when last_mode[0] != VAR[1].
last_mode[0] = -127
setcommand(_VAR, 1, -1)

' Motor controller configuration. Much of this is particular to Grizzly
' and can be generalized/parameterized as the need arises. Page numbers
' are a reference to this document:
' www.roboteq.com/index.php/docman/motor-controllers-documents-and-files/documentation/user-manual/7-nextgen-controllers-user-manual/file

setconfig(_ECHOF, 1) ' Serial echo off (p195)
setconfig(_RWD, 110) ' Watchdog timeout, milliseconds (p195)
'setconfig(_AMOD, 1, 1) ' Analog input 1 absolute mode
'setconfig(_AMOD, 2, 1) ' Analog input 2 absolute mode

' Undervoltage/overvoltage limits (p214)
setconfig(_OVL, 300) 'over voltage level * 10, 300 = 30 V
setconfig(_UVL, 170) 'under voltage level * 10, 170 = 17 V

for ch = 1 andwhile ch <= MAX_CHANNELS evaluate ch++
	' Encoder, speed config (p208, p221)
	setconfig(_EMOD, ch, ch*16 + 2)'???
	setconfig(_EPPR, ch, 256) 'pulse per revolution for encoder 
	setconfig(_MXRPM, ch, 1000) 'max RPM per channel 
	setconfig(_CLERD, ch, 0) ' parameter used to shut the system down due to large tracking errors

	' Current limit (p216)
	setconfig(_ALIM, ch, 500) 'amp limit per channel * 10 
	setconfig(_ATGA, ch, 1) 'amps trigger action, 1 = trigger safety stop 
	setconfig(_ATGD, ch, 250) ' delay in ms to trigger amps action
	setconfig(_ATRIG, ch, 600) ' max amps rating in datasheet 

	' Max acceleration/deceleration (p219)
	setconfig(_MAC, ch, 10000) 'max acceleration limits * 10
	setconfig(_MDEC, ch, 10000) 'max deceleration limits * 10
next

top:
	for ch = 1 andwhile ch <= MAX_CHANNELS evaluate ch++
		if last_mode[ch - 1] <> getvalue(_VAR, ch) then
			last_mode[ch - 1] = getvalue(_VAR, ch)

			' Motor to be stopped (high-Z).
			if getvalue(_VAR, ch) = -1 then
				setconfig(_MMOD, ch, 1)
				setconfig(_KP, ch, 0)
				setconfig(_KI, ch, 0)
				setconfig(_KD, ch, 0)
				setconfig(_ICAP, ch, 0)
				setcommand(_G, ch, 0)
			end if

			' Motor in velocity-control mode.
			if getvalue(_VAR, ch) = 0 then
				setconfig(_MMOD, ch, 1)
				setconfig(_KP, ch, 10)
				setconfig(_KI, ch, 50)
				setconfig(_KD, ch, 0)
				setconfig(_ICAP, ch, 600)
			end if

			' Motor in position-control mode.
			if getvalue(_VAR, ch) = 1 then
				setconfig(_MMOD, ch, 3)
				setconfig(_KP, ch, 2)
				setconfig(_KI, ch, 0)
				setconfig(_KD, ch, 0)
				setconfig(_ICAP, ch, 0)
			end if
		end if
		
		' Send feedback for this channel at 25Hz.
		GoSub PrintFeedback
	next

	' Send status messages for the controller at 5Hz.
	c++
	if c = 5 then
		GoSub PrintStatus
		
		c = 0
	end if

	wait(19)
	goto top

PrintFeedback:
	print("&f:", ch)
	print(":", getvalue(_MOTAMPS, ch))
	print(":", getvalue(_MOTCMD, ch))
	print(":", getvalue(_MOTPWR, ch))
	print(":", getvalue(_ABSPEED, ch))
	print(":", getvalue(_ABCNTR, ch))
	print(":", getvalue(_VOLTS, 2))
	print(":", getvalue(_BATAMPS, ch))
	print(":", getvalue(_ANAIN, ch))
	print(":", getvalue(_TEMP, ch+1))
	print("\r")
	Return
	
PrintStatus:
	print("&s:", SCRIPT_VER)
	print(":", getvalue(_FLTFLAG))
	print(":", getvalue(_STFLAG))
	print(":", getvalue(_VOLTS, 1))
	print(":", getvalue(_VOLTS, 3))
	print(":", getvalue(_TEMP, 1))
	print(":", getvalue(_DIN, 3))
	print("\r")
	Return
